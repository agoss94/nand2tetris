// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=inA); // Either A or C instruction
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA); // Load into A if A instruction or controll bit 5 is 1
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM); //A Register
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAOrOutM); //input M or A into Alu depending on controll bit 12
    And(a = instruction[4], b = instruction[15], out = loadD);
    DRegister(in=outAlu, load=loadD, out=outD); //D Register
    ALU(
        x=outD, 
        y=outAOrOutM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outAlu, 
        out=outM, 
        zr=zr, 
        ng=ng
    );

    //writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    //jump directives
    Or(a = ng, b = zr, out = le);
    Not(in = le, out = gt);
    And(a = instruction[0], b = gt, out = JGT);
    And(a = instruction[1], b = zr, out = JEQ);
    And(a = instruction[2], b = ng, out = JLT);
    
    Or8Way(in[0] = JGT, in[1] = JEQ, in[2] = JLT, in[3..7] = false, out=jumpToA);
    And(a = jumpToA, b = instruction[15], out = jump);
    Not(in = jump, out = isInc);
    
    PC(in=outA, load=jump, inc=isInc, reset=reset, out[0..14]=pc);
}